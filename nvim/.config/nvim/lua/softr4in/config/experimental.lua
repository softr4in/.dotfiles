-- -- movement keybinds for navigating splits
-- set("n", "<c-j>", "<c-w><c-j>")
-- set("n", "<c-k>", "<c-w><c-k>")
-- set("n", "<c-l>", "<c-w><c-l>")
-- set("n", "<c-h>", "<c-w><c-h>")

-- {
--     "rose-pine/neovim",
--     name = "rose-pine",
--     config = function()
--         require('rose-pine').setup({
--             disable_background = true,
--         })
--
--         vim.cmd("colorscheme rose-pine")
--
--         ColorMyPencils()
--     end
-- },

-- vim.keymap.set("n", "<leader>pv", vim.cmd.Ex)
--
-- vim.keymap.set("v", "J", ":m '>+1<CR>gv=gv")
-- vim.keymap.set("v", "K", ":m '<-2<CR>gv=gv")
--
-- vim.keymap.set("n", "J", "mzJ`z")
-- vim.keymap.set("n", "<C-d>", "<C-d>zz")
-- vim.keymap.set("n", "<C-u>", "<C-u>zz")
-- vim.keymap.set("n", "n", "nzzzv")
-- vim.keymap.set("n", "N", "Nzzzv")
--
-- -- greatest remap ever
-- vim.keymap.set("x", "<leader>p", [["_dP]])
--
-- -- next greatest remap ever : asbjornHaland
-- vim.keymap.set({"n", "v"}, "<leader>y", [["+y]])
-- vim.keymap.set("n", "<leader>Y", [["+Y]])
--
-- vim.keymap.set({"n", "v"}, "<leader>d", [["_d]])
--
-- vim.keymap.set("n", "Q", "<nop>")
-- vim.keymap.set("n", "<C-f>", "<cmd>silent !tmux neww tmux-sessionizer<CR>")
-- vim.keymap.set("n", "<leader>f", vim.lsp.buf.format)
--
-- vim.keymap.set("n", "<C-k>", "<cmd>cnext<CR>zz")
-- vim.keymap.set("n", "<C-j>", "<cmd>cprev<CR>zz")
-- vim.keymap.set("n", "<leader>k", "<cmd>lnext<CR>zz")
-- vim.keymap.set("n", "<leader>j", "<cmd>lprev<CR>zz")
--
-- vim.keymap.set("n", "<leader>s", [[:%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>]])
-- vim.keymap.set("n", "<leader>x", "<cmd>!chmod +x %<CR>", { silent = true })
--
-- vim.keymap.set(
--     "n",
--     "<leader>ee",
--     "oif err != nil {<CR>}<Esc>Oreturn err<Esc>"
-- )
--
-- vim.keymap.set("n", "<leader><leader>", function()
--     vim.cmd("so")
-- end)


-- -- what's the benefit of getting vim to recognize the .templ extension? Can I get syntax highlighting?
-- vim.filetype.add({
--     extension = {
--         templ = 'templ',
--     }
-- })


-- -- What do these autocmds do?
-- autocmd('TextYankPost', {
--     group = yank_group,
--     pattern = '*',
--     callback = function()
--         vim.highlight.on_yank({
--             higroup = 'IncSearch',
--             timeout = 40,
--         })
--     end,
-- })
--
-- autocmd({"BufWritePre"}, {
--     group = ThePrimeagenGroup,
--     pattern = "*",
--     command = [[%s/\s\+$//e]],
-- })


-- -- Why do these keymaps need autocmd?
-- autocmd('LspAttach', {
--     group = ThePrimeagenGroup,
--     callback = function(e)
--         local opts = { buffer = e.buf }
--         vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts)
--         vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)
--         vim.keymap.set("n", "<leader>vws", function() vim.lsp.buf.workspace_symbol() end, opts)
--         vim.keymap.set("n", "<leader>vd", function() vim.diagnostic.open_float() end, opts)
--         vim.keymap.set("n", "<leader>vca", function() vim.lsp.buf.code_action() end, opts)
--         vim.keymap.set("n", "<leader>vrr", function() vim.lsp.buf.references() end, opts)
--         vim.keymap.set("n", "<leader>vrn", function() vim.lsp.buf.rename() end, opts)
--         vim.keymap.set("i", "<C-h>", function() vim.lsp.buf.signature_help() end, opts)
--         vim.keymap.set("n", "[d", function() vim.diagnostic.goto_next() end, opts)
--         vim.keymap.set("n", "]d", function() vim.diagnostic.goto_prev() end, opts)
--     end
-- })

-- -- What do these options do?
-- vim.opt.guicursor = ""
-- vim.opt.nu = true
-- vim.opt.softtabstop = 4
-- vim.opt.smartcase = true
-- vim.opt.splitbelow = true
-- vim.opt.splitright = true
-- vim.opt.signcolumn = "yes"
-- vim.opt.shada = { "'10", "<0", "s10", "h" }
-- vim.opt.swapfile = false
-- vim.opt.backup = false
-- vim.opt.undodir = os.getenv("HOME") .. "/.vim/undodir"
-- vim.opt.undofile = true
-- vim.opt.signcolumn = "yes"
-- vim.opt.isfname:append("@-@")
-- vim.opt.updatetime = 50
-- vim.opt.colorcolumn = "80"

-- -- Why set hlsearch to false and incsearch to true instead of just hlsearch to true? What advantage is there in doing so
-- vim.opt.hlsearch = false
-- vim.opt.incsearch = true

-- -- What's the difference between these 2 keymaps?
-- vim.ot.clipboard = "unnamedplus"
-- vim.opt.clipboard:append { "unnamed", "unnamedplus" } -- allows copypasting between vim and other apps

-- -- Why would 'o' add a comment?
-- vim.opt.formatoptions:remove "o"

-- -- Why do some programmers prefer to disable vim.opt.wrap by default and only enable the following? Is there some kind
-- -- of downside I'm missing?
-- vim.opt.linebreak = true

-- vim.opt.completeopt = { "menu", "menuone", "noselect" }
-- vim.opt.shortmess:append "c"
